{{define "function"}}
{{- $f := .}}

func {{.TestName}}(t *testing.T) {
    assert := assert.New(t)
	{{- with .Receiver}}
		{{- if .IsStruct}}
			{{- if .Fields}}
				type fields struct {
				{{- range .Fields}}
					{{Field .}} {{.Type}}
				{{- end}}
				}
			{{- end}}
		{{- end}}
	{{- end}}
	{{- if .TestParameters}}
	type args struct {
		{{- range .TestParameters}}
				{{Param .}} {{.Type}}
		{{- end}}
	}
	{{- end}}
    tests := []struct {
        name string
		{{- with .Receiver}}
			{{- if and .IsStruct .Fields}}
				fields fields
			{{- else}}
				{{Receiver .}} {{.Type}}
			{{- end}}
		{{- end}}
		{{- if .TestParameters}}
			args args
		{{- end}}
		{{- range .TestResults}}
			{{Want .}} {{.Type}}
		{{- end}}
		{{- if .ReturnsError}}
			err string
		{{- end}}
	}{
		// TODO: Add test cases.
	}
    for {{if (or .Subtests (not .IsNaked))}} _, tt := {{end}} range tests {
		{{- if .Subtests}}
        {{- if .Parallel}}tt := tt{{end}}
        t.Run(tt.name, func(t *testing.T) {
			{{- if .Parallel}}t.Parallel(){{end}}
		{{- end}}
			{{- with .Receiver}}
				{{- if .IsStruct}}
					{{Receiver .}} := {{if .Type.IsStar}}&{{end}}{{.Type.Value}}{
					{{- range .Fields}}
						{{.Name}}: tt.fields.{{Field .}},
					{{- end}}
					}
				{{- end}}
			{{- end}}
			{{- range .Parameters}}
				{{- if .IsWriter}}
					{{Param .}} := &bytes.Buffer{}
				{{- end}}
			{{- end}}
			{{- if and (not .OnlyReturnsError) (not .OnlyReturnsOneValue) }}
				{{template "results" $f}} {{template "call" $f}}
			{{- end}}
			{{- if .ReturnsError}}
				if {{if .OnlyReturnsError}} err := {{template "call" $f}}; {{end}} err != nil {
                    if tt.err == "" {
                        assert.Equal({{template "inputs" $f}} err.Error(), "", "test: [" + tt.name + "] return: [" + err.Error() +"] not nil but want nil")
                    } else {
                        assert.Contains(err.Error(), tt.err, "test: [" + tt.name + "] error message not eq")
                    }
                    {{- if .TestResults}}
                        {{if .Subtests }}return{{else}}continue{{end}}
                    {{- end}}
                } else {
                    assert.Equal("", tt.err, "test: ["+tt.name+"] return nil but want not nil")
                }
            {{- end}}
            {{- range .TestResults}}
				{{- if .IsWriter}}
					if {{Got .}} := {{Param .}}.String(); {{Got .}} != tt.{{Want .}} {
				{{- else if .IsBasicType}}
					if {{if $f.OnlyReturnsOneValue}}{{Got .}} := {{template "inline" $f}}; {{end}} {{Got .}} != tt.{{Want .}} {
				{{- else}}
					if {{if $f.OnlyReturnsOneValue}}{{Got .}} := {{template "inline" $f}}; {{end}} !reflect.DeepEqual({{Got .}}, tt.{{Want .}}) {
				{{- end}}
				assert.Equal({{template "inputs" $f}} {{Got .}}, tt.{{Want .}}, "test: ["+tt.name+"] got not match want")
				}
			{{- end}}
		{{- if .Subtests }} }) {{- end -}}
	}
}

{{end}}

